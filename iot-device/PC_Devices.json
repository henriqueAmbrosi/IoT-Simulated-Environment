[
    {
        "id": "75eda1d0d4b6584b",
        "type": "tab",
        "label": "PC Devices",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5173486880489745",
        "type": "inject",
        "z": "75eda1d0d4b6584b",
        "name": "Trigger (10s)",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 160,
        "y": 1280,
        "wires": [
            [
                "70b4624e0a8f24c5",
                "4f2fc0dd5bdb7c35",
                "9c0ea6a4a85a5da6",
                "20fe4a5a9752b745"
            ]
        ],
        "info": "Trigger"
    },
    {
        "id": "acf94eddf408b2a0",
        "type": "mqtt out",
        "z": "75eda1d0d4b6584b",
        "name": "",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "635b151446051cd9",
        "x": 1750,
        "y": 1220,
        "wires": []
    },
    {
        "id": "20fe4a5a9752b745",
        "type": "join",
        "z": "75eda1d0d4b6584b",
        "name": "Barrier to get full report",
        "mode": "custom",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 930,
        "y": 1280,
        "wires": [
            [
                "34340eafb14a9b7b"
            ]
        ]
    },
    {
        "id": "6212c095baa98740",
        "type": "debug",
        "z": "75eda1d0d4b6584b",
        "name": "Device 1 Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1340,
        "wires": []
    },
    {
        "id": "70b4624e0a8f24c5",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Light Sensor",
        "func": "let light = 90 + Math.random() * 110; // 90–'200\nlet obj = {}\nobj.light = {\n \"STK31610 Light\": {\n    \"values\": [\n        light\n    ]\n }\n};\nreturn obj",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1100,
        "wires": [
            [
                "20fe4a5a9752b745"
            ]
        ]
    },
    {
        "id": "4f2fc0dd5bdb7c35",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Battery",
        "func": "// Get last reading from context\nlet last = flow.get(\"lastReading-d1\")?.battery || {\n    percentage: 98,\n    status: \"CHARGING\"\n};\n\nlet percentage = last.percentage || 100;\nlet status = last.status || \"DISCHARGING\";\n\n// 20% chance of change\nif (Math.random() < 0.20) {\n    if (status === \"CHARGING\") {\n        percentage = percentage + 1;\n    } else {\n        percentage = percentage - 1;\n    }\n}\n\n// Flip status if reaching limits\nif (percentage === 100) {\n    status = \"DISCHARGING\";\n} else if (percentage === 0) {\n    status = \"CHARGING\";\n}\n\nlet obj = {};\nobj.battery = {\n    percentage: percentage,\n    status: status\n};\nreturn obj;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1140,
        "wires": [
            [
                "20fe4a5a9752b745"
            ]
        ]
    },
    {
        "id": "9c0ea6a4a85a5da6",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Location",
        "func": "let last = flow.get(\"lastReading-d1\")?.location || {\n    latitude: -29.1676245,\n    longitude: -51.5065077,\n    altitude: 642.2999877929688\n};\n\nlet latitude = last.latitude;\nlet longitude = last.longitude;\nlet altitude = last.altitude;\n\n// 50% chance to vary\nif (Math.random() < 0.5) {\n    // small delta ~ within ~1–5 meters movement\n    let deltaLat = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaLon = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaAlt = (Math.random() - 0.5) * 0.5;       // ±0.5m\n\n    latitude += deltaLat;\n    longitude += deltaLon;\n    altitude += deltaAlt;\n}\n\nlet newLoc = { latitude, longitude, altitude };\nreturn { location: newLoc };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1180,
        "wires": [
            [
                "20fe4a5a9752b745"
            ]
        ]
    },
    {
        "id": "34340eafb14a9b7b",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Filter repeated readings",
        "func": "// Get last stored reading from context\nlet last = flow.get(\"lastReading-d1\") || {};\n\n// Current values\nlet battery = msg.battery;\nlet location = msg.location;\n\n// Check if repeated\nlet sameBattery = last.battery !== undefined && \n                last.battery.percentage === battery.percentage &&\n                last.battery.status === battery.status;\nlet sameLocation = last.location !== undefined &&\n                  last.location.latitude === location.latitude &&\n                  last.location.longitude === location.longitude &&\n                  last.location.altitude === location.altitude;\n\nif (sameBattery) {\n    delete msg.battery\n}\n\nif (sameLocation) {\n    delete msg.location\n}\n\n// Update stored values\nflow.set(\"lastReading-d1\", {\n    battery: battery,\n    location: location\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1280,
        "wires": [
            [
                "afc423f02bad8a06"
            ]
        ]
    },
    {
        "id": "afc423f02bad8a06",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "format message",
        "func": "msg.payload.light = Object.values(msg.light)[0]?.values[0]\ndelete msg.light\n\nif(msg.location){\n    msg.payload.latitude = msg.location.latitude\n    msg.payload.longitude = msg.location.longitude\n    msg.payload.altitude = msg.location.altitude\n    delete msg.location\n}\ndelete msg.payload.location\n\nif(msg.battery){\n    msg.payload.batteryPercentage = msg.battery.percentage\n    msg.payload.batteryStatus = msg.battery.status\n    delete msg.battery\n}\ndelete msg.payload.battery\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1280,
        "wires": [
            [
                "6212c095baa98740",
                "acf94eddf408b2a0"
            ]
        ]
    },
    {
        "id": "626d225743292c44",
        "type": "inject",
        "z": "75eda1d0d4b6584b",
        "name": "Trigger (10s)",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 140,
        "y": 1700,
        "wires": [
            [
                "7dc4b4ec1236ee17",
                "eb38681bb7a7d667",
                "e09b1a61e6875016",
                "0ed8756a8cab573d"
            ]
        ],
        "info": "Trigger"
    },
    {
        "id": "da0fe4b4a314c386",
        "type": "mqtt out",
        "z": "75eda1d0d4b6584b",
        "name": "",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a831b29e37088eab",
        "x": 1730,
        "y": 1640,
        "wires": []
    },
    {
        "id": "0ed8756a8cab573d",
        "type": "join",
        "z": "75eda1d0d4b6584b",
        "name": "Barrier to get full report",
        "mode": "custom",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 910,
        "y": 1700,
        "wires": [
            [
                "99f57fa8afc0420d"
            ]
        ]
    },
    {
        "id": "90fdff3ac39be9a3",
        "type": "debug",
        "z": "75eda1d0d4b6584b",
        "name": "Device 2 Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1760,
        "wires": []
    },
    {
        "id": "7dc4b4ec1236ee17",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Light Sensor",
        "func": "let light = 90 + Math.random() * 110; // 90–'200\nlet obj = {}\nobj.light = {\n \"STK31610 Light\": {\n    \"values\": [\n        light\n    ]\n }\n};\nreturn obj",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1520,
        "wires": [
            [
                "0ed8756a8cab573d"
            ]
        ]
    },
    {
        "id": "eb38681bb7a7d667",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Battery",
        "func": "// Get last reading from context\nlet last = flow.get(\"lastReading-d2\")?.battery || {\n    percentage: 100,\n    status: \"DISCHARGING\"\n};\n\nlet percentage = last.percentage || 100;\nlet status = last.status || \"DISCHARGING\";\n\n// 20% chance of change\nif (Math.random() < 0.2) {\n    if (status === \"CHARGING\") {\n        percentage = percentage + 1;\n    } else {\n        percentage = percentage - 1;\n    }\n}\n\n// Flip status if reaching limits\nif (percentage === 100) {\n    status = \"DISCHARGING\";\n} else if (percentage === 0) {\n    status = \"CHARGING\";\n}\n\nlet obj = {};\nobj.battery = {\n    percentage: percentage,\n    status: status\n};\nreturn obj;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1560,
        "wires": [
            [
                "0ed8756a8cab573d"
            ]
        ]
    },
    {
        "id": "e09b1a61e6875016",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Location",
        "func": "let last = flow.get(\"lastReading-d2\")?.location || {\n    latitude: -29.1676245,\n    longitude: -51.5065077,\n    altitude: 642.2999877929688\n};\n\nlet latitude = last.latitude;\nlet longitude = last.longitude;\nlet altitude = last.altitude;\n\n// 50% chance to vary\nif (Math.random() < 0.5) {\n    // small delta ~ within ~1–5 meters movement\n    let deltaLat = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaLon = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaAlt = (Math.random() - 0.5) * 0.5;       // ±0.5m\n\n    latitude += deltaLat;\n    longitude += deltaLon;\n    altitude += deltaAlt;\n}\n\nlet newLoc = { latitude, longitude, altitude };\nreturn { location: newLoc };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1600,
        "wires": [
            [
                "0ed8756a8cab573d"
            ]
        ]
    },
    {
        "id": "99f57fa8afc0420d",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Filter repeated readings",
        "func": "// Get last stored reading from context\nlet last = flow.get(\"lastReading-d2\") || {};\n\n// Current values\nlet battery = msg.battery;\nlet location = msg.location;\n\n// Check if repeated\nlet sameBattery = last.battery !== undefined && \n                last.battery.percentage === battery.percentage &&\n                last.battery.status === battery.status;\nlet sameLocation = last.location !== undefined &&\n                  last.location.latitude === location.latitude &&\n                  last.location.longitude === location.longitude &&\n                  last.location.altitude === location.altitude;\n\nif (sameBattery) {\n    delete msg.battery\n}\n\nif (sameLocation) {\n    delete msg.location\n}\n\n// Update stored values\nflow.set(\"lastReading-d2\", {\n    battery: battery,\n    location: location\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1700,
        "wires": [
            [
                "666c68eba22ffea2"
            ]
        ]
    },
    {
        "id": "666c68eba22ffea2",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "format message",
        "func": "msg.payload.light = Object.values(msg.light)[0]?.values[0]\ndelete msg.light\n\nif(msg.location){\n    msg.payload.latitude = msg.location.latitude\n    msg.payload.longitude = msg.location.longitude\n    msg.payload.altitude = msg.location.altitude\n    delete msg.location\n}\ndelete msg.payload.location\n\nif(msg.battery){\n    msg.payload.batteryPercentage = msg.battery.percentage\n    msg.payload.batteryStatus = msg.battery.status\n    delete msg.battery\n}\ndelete msg.payload.battery\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1700,
        "wires": [
            [
                "90fdff3ac39be9a3",
                "da0fe4b4a314c386"
            ]
        ]
    },
    {
        "id": "4a6bfb2a88d39bd9",
        "type": "inject",
        "z": "75eda1d0d4b6584b",
        "name": "Trigger (10s)",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 140,
        "y": 2040,
        "wires": [
            [
                "28af05863eecc9b8",
                "62e59573ac8e2f16",
                "4694ef3b92bed9a4",
                "a33f73a395dffcda"
            ]
        ],
        "info": "Trigger"
    },
    {
        "id": "3268610392037566",
        "type": "mqtt out",
        "z": "75eda1d0d4b6584b",
        "name": "",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5d7f7622030f8cd1",
        "x": 1730,
        "y": 1980,
        "wires": []
    },
    {
        "id": "a33f73a395dffcda",
        "type": "join",
        "z": "75eda1d0d4b6584b",
        "name": "Barrier to get full report",
        "mode": "custom",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 910,
        "y": 2040,
        "wires": [
            [
                "8abc82b6cb5b1269"
            ]
        ]
    },
    {
        "id": "6943fefe41315067",
        "type": "debug",
        "z": "75eda1d0d4b6584b",
        "name": "Device 3 Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 2100,
        "wires": []
    },
    {
        "id": "28af05863eecc9b8",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Light Sensor",
        "func": "let light = 90 + Math.random() * 110; // 90–'200\nlet obj = {}\nobj.light = {\n \"STK31610 Light\": {\n    \"values\": [\n        light\n    ]\n }\n};\nreturn obj",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1860,
        "wires": [
            [
                "a33f73a395dffcda"
            ]
        ]
    },
    {
        "id": "62e59573ac8e2f16",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Battery",
        "func": "// Get last reading from context\nlet last = flow.get(\"lastReading-d3\")?.battery || {\n    percentage: 100,\n    status: \"DISCHARGING\"\n};\n\nlet percentage = last.percentage || 100;\nlet status = last.status || \"DISCHARGING\";\n\n// 20% chance of change\nif (Math.random() < 0.2) {\n    if (status === \"CHARGING\") {\n        percentage = percentage + 1;\n    } else {\n        percentage = percentage - 1;\n    }\n}\n\n// Flip status if reaching limits\nif (percentage === 100) {\n    status = \"DISCHARGING\";\n} else if (percentage === 0) {\n    status = \"CHARGING\";\n}\n\nlet obj = {};\nobj.battery = {\n    percentage: percentage,\n    status: status\n};\nreturn obj;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1900,
        "wires": [
            [
                "a33f73a395dffcda"
            ]
        ]
    },
    {
        "id": "4694ef3b92bed9a4",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Location",
        "func": "let last = flow.get(\"lastReading-d3\")?.location || {\n    latitude: -29.1676245,\n    longitude: -51.5065077,\n    altitude: 642.2999877929688\n};\n\nlet latitude = last.latitude;\nlet longitude = last.longitude;\nlet altitude = last.altitude;\n\n// 50% chance to vary\nif (Math.random() < 0.5) {\n    // small delta ~ within ~1–5 meters movement\n    let deltaLat = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaLon = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaAlt = (Math.random() - 0.5) * 0.5;       // ±0.5m\n\n    latitude += deltaLat;\n    longitude += deltaLon;\n    altitude += deltaAlt;\n}\n\nlet newLoc = { latitude, longitude, altitude };\nreturn { location: newLoc };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1940,
        "wires": [
            [
                "a33f73a395dffcda"
            ]
        ]
    },
    {
        "id": "8abc82b6cb5b1269",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Filter repeated readings",
        "func": "// Get last stored reading from context\nlet last = flow.get(\"lastReading-d3\") || {};\n\n// Current values\nlet battery = msg.battery;\nlet location = msg.location;\n\n// Check if repeated\nlet sameBattery = last.battery !== undefined && \n                last.battery.percentage === battery.percentage &&\n                last.battery.status === battery.status;\nlet sameLocation = last.location !== undefined &&\n                  last.location.latitude === location.latitude &&\n                  last.location.longitude === location.longitude &&\n                  last.location.altitude === location.altitude;\n\nif (sameBattery) {\n    delete msg.battery\n}\n\nif (sameLocation) {\n    delete msg.location\n}\n\n// Update stored values\nflow.set(\"lastReading-d3\", {\n    battery: battery,\n    location: location\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 2040,
        "wires": [
            [
                "88dd0924f0fac075"
            ]
        ]
    },
    {
        "id": "88dd0924f0fac075",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "format message",
        "func": "msg.payload.light = Object.values(msg.light)[0]?.values[0]\ndelete msg.light\n\nif(msg.location){\n    msg.payload.latitude = msg.location.latitude\n    msg.payload.longitude = msg.location.longitude\n    msg.payload.altitude = msg.location.altitude\n    delete msg.location\n}\ndelete msg.payload.location\n\nif(msg.battery){\n    msg.payload.batteryPercentage = msg.battery.percentage\n    msg.payload.batteryStatus = msg.battery.status\n    delete msg.battery\n}\ndelete msg.payload.battery\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 2040,
        "wires": [
            [
                "6943fefe41315067",
                "3268610392037566"
            ]
        ]
    },
    {
        "id": "5c23f7f8bef4fecf",
        "type": "inject",
        "z": "75eda1d0d4b6584b",
        "name": "Trigger (10s)",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 140,
        "y": 2380,
        "wires": [
            [
                "d457d2fad226cfc5",
                "13546c52dcccbd8a",
                "a3ab14a34ca8b495",
                "c30f830e7f080492"
            ]
        ],
        "info": "Trigger"
    },
    {
        "id": "bb68ede978c17f20",
        "type": "mqtt out",
        "z": "75eda1d0d4b6584b",
        "name": "",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8437c158d01f3383",
        "x": 1730,
        "y": 2320,
        "wires": []
    },
    {
        "id": "c30f830e7f080492",
        "type": "join",
        "z": "75eda1d0d4b6584b",
        "name": "Barrier to get full report",
        "mode": "custom",
        "build": "merged",
        "property": "",
        "propertyType": "full",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 910,
        "y": 2380,
        "wires": [
            [
                "4460c60fcfd1e2f0"
            ]
        ]
    },
    {
        "id": "7e4b5f9297e5a7ac",
        "type": "debug",
        "z": "75eda1d0d4b6584b",
        "name": "Device 4 Output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 2440,
        "wires": []
    },
    {
        "id": "d457d2fad226cfc5",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Light Sensor",
        "func": "let light = 90 + Math.random() * 110; // 90–'200\nlet obj = {}\nobj.light = {\n \"STK31610 Light\": {\n    \"values\": [\n        light\n    ]\n }\n};\nreturn obj",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2200,
        "wires": [
            [
                "c30f830e7f080492"
            ]
        ]
    },
    {
        "id": "13546c52dcccbd8a",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Battery",
        "func": "// Get last reading from context\nlet last = flow.get(\"lastReading-d4\")?.battery || {\n    percentage: 100,\n    status: \"DISCHARGING\"\n};\n\nlet percentage = last.percentage || 100;\nlet status = last.status || \"DISCHARGING\";\n\n// 20% chance of change\nif (Math.random() < 0.2) {\n    if (status === \"CHARGING\") {\n        percentage = percentage + 1;\n    } else {\n        percentage = percentage - 1;\n    }\n}\n\n// Flip status if reaching limits\nif (percentage === 100) {\n    status = \"DISCHARGING\";\n} else if (percentage === 0) {\n    status = \"CHARGING\";\n}\n\nlet obj = {};\nobj.battery = {\n    percentage: percentage,\n    status: status\n};\nreturn obj;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2240,
        "wires": [
            [
                "c30f830e7f080492"
            ]
        ]
    },
    {
        "id": "a3ab14a34ca8b495",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Location",
        "func": "let last = flow.get(\"lastReading-d4\")?.location || {\n    latitude: -29.1676245,\n    longitude: -51.5065077,\n    altitude: 642.2999877929688\n};\n\nlet latitude = last.latitude;\nlet longitude = last.longitude;\nlet altitude = last.altitude;\n\n// 50% chance to vary\nif (Math.random() < 0.5) {\n    // small delta ~ within ~1–5 meters movement\n    let deltaLat = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaLon = (Math.random() - 0.5) * 0.00005;   // ~±5m\n    let deltaAlt = (Math.random() - 0.5) * 0.5;       // ±0.5m\n\n    latitude += deltaLat;\n    longitude += deltaLon;\n    altitude += deltaAlt;\n}\n\nlet newLoc = { latitude, longitude, altitude };\nreturn { location: newLoc };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2280,
        "wires": [
            [
                "c30f830e7f080492"
            ]
        ]
    },
    {
        "id": "4460c60fcfd1e2f0",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Filter repeated readings",
        "func": "// Get last stored reading from context\nlet last = flow.get(\"lastReading-d4\") || {};\n\n// Current values\nlet battery = msg.battery;\nlet location = msg.location;\n\n// Check if repeated\nlet sameBattery = last.battery !== undefined && \n                last.battery.percentage === battery.percentage &&\n                last.battery.status === battery.status;\nlet sameLocation = last.location !== undefined &&\n                  last.location.latitude === location.latitude &&\n                  last.location.longitude === location.longitude &&\n                  last.location.altitude === location.altitude;\n\nif (sameBattery) {\n    delete msg.battery\n}\n\nif (sameLocation) {\n    delete msg.location\n}\n\n// Update stored values\nflow.set(\"lastReading-d4\", {\n    battery: battery,\n    location: location\n});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 2380,
        "wires": [
            [
                "f241bb84a5fcfe5a"
            ]
        ]
    },
    {
        "id": "f241bb84a5fcfe5a",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "format message",
        "func": "msg.payload.light = Object.values(msg.light)[0]?.values[0]\ndelete msg.light\n\nif(msg.location){\n    msg.payload.latitude = msg.location.latitude\n    msg.payload.longitude = msg.location.longitude\n    msg.payload.altitude = msg.location.altitude\n    delete msg.location\n}\ndelete msg.payload.location\n\nif(msg.battery){\n    msg.payload.batteryPercentage = msg.battery.percentage\n    msg.payload.batteryStatus = msg.battery.status\n    delete msg.battery\n}\ndelete msg.payload.battery\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 2380,
        "wires": [
            [
                "7e4b5f9297e5a7ac",
                "bb68ede978c17f20"
            ]
        ]
    },
    {
        "id": "e38cf93072b5608d",
        "type": "inject",
        "z": "75eda1d0d4b6584b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1000,
        "wires": [
            [
                "c658f9a977e37a8d"
            ]
        ]
    },
    {
        "id": "c658f9a977e37a8d",
        "type": "function",
        "z": "75eda1d0d4b6584b",
        "name": "Reset context",
        "func": "flow.set('lastReading-d1', undefined); // Resets a specific variable\nflow.set('lastReading-d2', undefined);\nflow.set('lastReading-d3', undefined);\nflow.set('lastReading-d4', undefined);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "635b151446051cd9",
        "type": "mqtt-broker",
        "name": "Device 1",
        "broker": "thingsboard-ce",
        "port": 1883,
        "credentials": {
            "user": "PC1",
            "password": "PC1"
        },
        "clientid": "1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a831b29e37088eab",
        "type": "mqtt-broker",
        "name": "Device 2",
        "broker": "thingsboard-ce",
        "port": 1883,
         "credentials": {
            "user": "PC2",
            "password": "PC2"
        },
        "clientid": "2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5d7f7622030f8cd1",
        "type": "mqtt-broker",
        "name": "Device 3",
        "broker": "thingsboard-ce",
        "port": 1883,
         "credentials": {
            "user": "PC3",
            "password": "PC3"
        },
        "clientid": "3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8437c158d01f3383",
        "type": "mqtt-broker",
        "name": "Device 4",
        "broker": "thingsboard-ce",
        "port": 1883,
        "credentials": {
            "user": "PC4",
            "password": "PC4"
        },
        "clientid": "4",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]